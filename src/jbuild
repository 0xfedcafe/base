(rule
 ((targets (int63_backend.ml))
  (deps    (select-int63-backend/select.ml))
  (action  (run ${OCAML} ${<}
            -portable-int63 ${PORTABLE_INT63}
            -arch-sixtyfour ${ARCH_SIXTYFOUR}
            -o ${@}))))

;; Create the target atomically to avoid having a window where the file is truncated but
;; not yet written to, which is problematic because the file is committed.
(rule
 ((targets (pow_overflow_bounds.ml))
  (deps    (../generate/generate_pow_overflow_bounds.exe))
  (action  (run ${<} -atomic -o ${@}))))

(library
 ((name base)
  (inline_tests ((javascript build_and_run)))
  (public_name base)
  (libraries
   (caml
    shadow_stdlib))
  (install_c_headers (internalhash))
  (c_flags (:standard -D_LARGEFILE64_SOURCE -mpopcnt))
  (c_names
   ;; If you add c stubs in here, ask yourself this question: would it make sense/can it
   ;; be implemented under windows and in javascript? If not, perhaps this piece of code
   ;; should go in core instead, since Base is supposed to be a portable library.
   (exn_stubs
    int_math_stubs
    internalhash_stubs
    heap_block_stubs
    hash_stubs
    string_dict_stubs))
  (preprocess no_preprocessing)
  (lint (pps (ppx_base ppx_base_lint -check-doc-comments -no-optcomp
                    -type-conv-keep-w32=impl
                    ;; Specify the list explicitely to be sure we
                    ;; don't interpret [%sexp_of: ...] and other
                    ;; similar extensions which don't work with the
                    ;; expect mode of ppx_driver
                    ;;
                    ;; This argument won't be needed once the expect
                    ;; mode is released as it will disable these
                    ;; extensions
                    -apply=js_style,base_lint,type_conv)))
  (js_of_ocaml (
    (javascript_files (runtime.js))
    ))))

(ocamllex (hex_lexer))

(enforce_style
 ((exceptions
   (hex_lexer.ml
    pow_overflow_bounds.ml))))
